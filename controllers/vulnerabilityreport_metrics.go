package controllers

import (
	"github.com/prometheus/client_golang/prometheus"
	"sigs.k8s.io/controller-runtime/pkg/metrics"

	"github.com/giantswarm/starboard-exporter/utils"
)

const (
	metricNamespace = "starboard_exporter"
	metricSubsystem = "vulnerabilityreport"

	LabelGroupAll     = "all"
	labelGroupSummary = "summary"
)

type FieldScope string

const (
	FieldScopeReport        FieldScope = "report"
	FieldScopeVulnerability FieldScope = "vulnerability"
)

type VulnerabilityLabel struct {
	Name   string
	Groups []string
	Scope  FieldScope
	// Handler valueFromReport
}

var metricLabels = []VulnerabilityLabel{
	{
		Name:   "report_name",
		Groups: []string{LabelGroupAll, labelGroupSummary},
		Scope:  FieldScopeReport,
	},
	{
		Name:   "image_namespace",
		Groups: []string{LabelGroupAll, labelGroupSummary},
		Scope:  FieldScopeReport,
	},
	{
		Name:   "image_registry",
		Groups: []string{LabelGroupAll, labelGroupSummary},
		Scope:  FieldScopeReport,
	},
	{
		Name:   "image_repository",
		Groups: []string{LabelGroupAll, labelGroupSummary},
		Scope:  FieldScopeReport,
	},
	{
		Name:   "image_tag",
		Groups: []string{LabelGroupAll, labelGroupSummary},
		Scope:  FieldScopeReport,
	},
	{
		Name:   "image_digest",
		Groups: []string{LabelGroupAll, labelGroupSummary},
		Scope:  FieldScopeReport,
	},
	{
		Name: "severity",
		// Note - Summary metrics use a different severity field than per-vulnerability severity.
		Groups: []string{LabelGroupAll, labelGroupSummary},
		Scope:  FieldScopeVulnerability,
	},
	{
		Name:   "vulnerability_id",
		Groups: []string{LabelGroupAll},
		Scope:  FieldScopeVulnerability,
	},
	{
		Name:   "vulnerable_resource_name",
		Groups: []string{LabelGroupAll},
		Scope:  FieldScopeVulnerability,
	},
	{
		Name:   "installed_resource_version",
		Groups: []string{LabelGroupAll},
		Scope:  FieldScopeVulnerability,
	},
	{
		Name:   "fixed_resource_version",
		Groups: []string{LabelGroupAll},
		Scope:  FieldScopeVulnerability,
	},
	{
		Name:   "vulnerability_title",
		Groups: []string{LabelGroupAll},
		Scope:  FieldScopeVulnerability,
	},
	{
		Name:   "vulnerability_link",
		Groups: []string{LabelGroupAll},
		Scope:  FieldScopeVulnerability,
	},
}

func LabelWithName(name string) (label VulnerabilityLabel, ok bool) {
	for _, label := range metricLabels {
		if label.Name == name {
			return label, true
		}
	}
	return VulnerabilityLabel{}, false
}

func LabelsForGroup(group string) []VulnerabilityLabel {
	l := []VulnerabilityLabel{}
	for _, label := range metricLabels {
		if utils.SliceContains(label.Groups, group) {
			l = append(l, label)
		}
	}
	return l
}

func labelNamesForGroup(group string) []string {
	l := []string{}
	for _, label := range metricLabels {
		if utils.SliceContains(label.Groups, group) {
			l = append(l, label.Name)
		}
	}
	return l
}

func LabelNamesForList(list []VulnerabilityLabel) []string {
	l := []string{}
	for _, label := range list {
		l = append(l, label.Name)
	}
	return l
}

// Gauge for the count of all vulnerabilities of a particular severity contained in an image.
var (
	VulnerabilitySummary = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Namespace: metricNamespace,
			Subsystem: metricSubsystem,
			Name:      "image_vulnerability_severity_count",
			Help:      "Exposes the number of vulnerabilities of a particular severity per-image.",
		},
		labelNamesForGroup(labelGroupSummary),
	)
)

// Gauge reporting the score of each CVE present in an image.
// Registered during first reconcile loop in registerMetrics().
var VulnerabilityInfo *prometheus.GaugeVec

func init() {
	// Register custom metrics with the global prometheus registry
	metrics.Registry.MustRegister(VulnerabilitySummary) // VulnerabilityInfo
}
