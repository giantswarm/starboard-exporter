/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/go-logr/logr"
	"github.com/pkg/errors"
	"github.com/prometheus/client_golang/prometheus"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	ctrlutil "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/metrics"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	aqua "github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
)

const (
	VulnerabilityReportFinalizer = "starboard-exporter.giantswarm.io/vulnerabilityreport"
)

var registerMetricsOnce sync.Once

// VulnerabilityReportReconciler reconciles a VulnerabilityReport object
type VulnerabilityReportReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme

	TargetLabels []VulnerabilityLabel
}

//+kubebuilder:rbac:groups=aquasecurity.github.io.giantswarm,resources=vulnerabilityreports,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=aquasecurity.github.io.giantswarm,resources=vulnerabilityreports/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=aquasecurity.github.io.giantswarm,resources=vulnerabilityreports/finalizers,verbs=update

func (r *VulnerabilityReportReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	_ = log.FromContext(ctx)
	_ = r.Log.WithValues("vulnerabilityreport", req.NamespacedName)

	registerMetricsOnce.Do(r.registerMetrics)

	report := &aqua.VulnerabilityReport{}
	if err := r.Client.Get(ctx, req.NamespacedName, report); err != nil {
		if apierrors.IsNotFound(err) {
			// Most likely the report was deleted.
			return ctrl.Result{}, nil
		}

		// Error reading the object.
		r.Log.Error(err, "Unable to read report")
		return ctrl.Result{}, err
	}

	if report.DeletionTimestamp.IsZero() {

		// Give the report our finalizer if it doesn't have one.
		if !sliceContains(report.GetFinalizers(), VulnerabilityReportFinalizer) {
			ctrlutil.AddFinalizer(report, VulnerabilityReportFinalizer)
			if err := r.Update(ctx, report); err != nil {
				return ctrl.Result{}, err
			}
		}

		r.Log.Info(fmt.Sprintf("Reconciled %s || Found (C/H/M/L/N/U): %d/%d/%d/%d/%d/%d",
			req.NamespacedName,
			report.Report.Summary.CriticalCount,
			report.Report.Summary.HighCount,
			report.Report.Summary.MediumCount,
			report.Report.Summary.LowCount,
			report.Report.Summary.NoneCount,
			report.Report.Summary.UnknownCount,
		))

		// Publish summary and CVE metrics for this report.
		r.publishImageMetrics(report)

	} else {

		if sliceContains(report.GetFinalizers(), VulnerabilityReportFinalizer) {
			// Unfortunately, we can't just clear the series based on one label value,
			// we have to reconstruct all of the label values to delete the series.
			// That's the only reason the finalizer is needed at all.
			r.clearImageMetrics(report)

			ctrlutil.RemoveFinalizer(report, VulnerabilityReportFinalizer)
			if err := r.Update(ctx, report); err != nil {
				return ctrl.Result{}, err
			}
		}
	}

	return defaultRequeue(), nil
}

func (r *VulnerabilityReportReconciler) registerMetrics() {

	VulnerabilityInfo = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Namespace: metricNamespace,
			Subsystem: metricSubsystem,
			Name:      "image_vulnerability",
			Help:      "Indicates the presence of a CVE in an image.",
		},
		LabelNamesForList(r.TargetLabels),
	)

	metrics.Registry.MustRegister(VulnerabilityInfo)
}

// SetupWithManager sets up the controller with the Manager.
func (r *VulnerabilityReportReconciler) SetupWithManager(mgr ctrl.Manager) error {
	err := ctrl.NewControllerManagedBy(mgr).
		For(&aqua.VulnerabilityReport{}).
		Complete(r)
	if err != nil {
		return errors.Wrap(err, "failed setting up controller with controller manager")
	}

	return nil
}

func (r *VulnerabilityReportReconciler) clearImageMetrics(report *aqua.VulnerabilityReport) {

	clearSummaryMetrics(report)

	// If we have custom metrics to delete, do it.
	if len(r.TargetLabels) > 0 {
		clearCustomMetrics(report, r.TargetLabels)
	}
}

func (r *VulnerabilityReportReconciler) publishImageMetrics(report *aqua.VulnerabilityReport) {

	publishSummaryMetrics(report)

	// If we have custom metrics to expose, do it.
	if len(r.TargetLabels) > 0 {
		publishCustomMetrics(report, r.TargetLabels)
	}
}

func getCountPerSeverity(report *aqua.VulnerabilityReport) map[string]float64 {
	// Format is e.g. {CRITICAL: 10}.
	return map[string]float64{
		string(aqua.SeverityCritical): float64(report.Report.Summary.CriticalCount),
		string(aqua.SeverityHigh):     float64(report.Report.Summary.HighCount),
		string(aqua.SeverityMedium):   float64(report.Report.Summary.MediumCount),
		string(aqua.SeverityLow):      float64(report.Report.Summary.LowCount),
		string(aqua.SeverityNone):     float64(report.Report.Summary.NoneCount),
		string(aqua.SeverityUnknown):  float64(report.Report.Summary.UnknownCount),
	}
}

func clearSummaryMetrics(report *aqua.VulnerabilityReport) {
	summaryValues := valuesForReport(report, LabelsForGroup(labelGroupSummary))

	// Delete the series for each severity.
	for severity := range getCountPerSeverity(report) {
		v := summaryValues
		v["severity"] = severity

		// Expose the metric.
		VulnerabilitySummary.Delete(
			v,
		)
	}
}

func publishSummaryMetrics(report *aqua.VulnerabilityReport) {
	summaryValues := valuesForReport(report, LabelsForGroup(labelGroupSummary))

	// Add the severity label after the standard labels and expose each severity metric.
	for severity, count := range getCountPerSeverity(report) {
		v := summaryValues
		v["severity"] = severity

		// Expose the metric.
		VulnerabilitySummary.With(
			v,
		).Set(count)
	}
}

func clearCustomMetrics(report *aqua.VulnerabilityReport, targetLabels []VulnerabilityLabel) {
	reportValues := valuesForReport(report, targetLabels)

	for _, v := range report.Report.Vulnerabilities {
		vulnValues := valuesForVulnerability(v, targetLabels)

		// Include the Report-level values.
		for label, value := range reportValues {
			vulnValues[label] = value
		}

		// Delete the metric
		VulnerabilityInfo.Delete(
			vulnValues,
		)
	}
}

func publishCustomMetrics(report *aqua.VulnerabilityReport, targetLabels []VulnerabilityLabel) {
	reportValues := valuesForReport(report, targetLabels)

	for _, v := range report.Report.Vulnerabilities {
		vulnValues := valuesForVulnerability(v, targetLabels)

		// Include the Report-level values.
		for label, value := range reportValues {
			vulnValues[label] = value
		}

		// If we have a score, use it for the value.
		score := float64(0)
		if v.Score != nil {
			score = *v.Score
		}

		// Expose the metric
		VulnerabilityInfo.With(
			vulnValues,
		).Set(score)
	}
}

func valuesForReport(report *aqua.VulnerabilityReport, labels []VulnerabilityLabel) map[string]string {
	result := map[string]string{}
	for _, label := range labels {
		if label.Scope == FieldScopeReport {
			result[label.Name] = reportValueFor(label.Name, report)
		}
	}
	return result
}

func valuesForVulnerability(vuln aqua.Vulnerability, labels []VulnerabilityLabel) map[string]string {
	result := map[string]string{}
	for _, label := range labels {
		if label.Scope == FieldScopeVulnerability {
			result[label.Name] = vulnValueFor(label.Name, vuln)
		}
	}
	return result
}

func reportValueFor(field string, report *aqua.VulnerabilityReport) string {
	switch field {
	case "report_name":
		return report.Name
	case "image_namespace":
		return report.Namespace
	case "image_registry":
		return report.Report.Registry.Server
	case "image_repository":
		return report.Report.Artifact.Repository
	case "image_tag":
		return report.Report.Artifact.Tag
	case "image_digest":
		return report.Report.Artifact.Digest
	default:
		// Error?
		return ""
	}
}

func vulnValueFor(field string, vuln aqua.Vulnerability) string {
	switch field {
	case "vulnerability_id":
		return vuln.VulnerabilityID
	case "vulnerable_resource_name":
		return vuln.Resource
	case "installed_resource_version":
		return vuln.InstalledVersion
	case "fixed_resource_version":
		return vuln.FixedVersion
	case "vulnerability_title":
		return vuln.Title
	case "vulnerability_link":
		return vuln.PrimaryLink
	case "severity":
		// Severity is a custom type in the Aqua library.
		return string(vuln.Severity)
	default:
		// Error?
		return ""
	}
}

func defaultRequeue() reconcile.Result {
	return ctrl.Result{
		Requeue:      true,
		RequeueAfter: time.Minute * 5,
	}
}
