/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"

	"github.com/go-logr/logr"
	"github.com/pkg/errors"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	aqua "github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
)

// VulnerabilityReportReconciler reconciles a VulnerabilityReport object
type VulnerabilityReportReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=aquasecurity.github.io.giantswarm,resources=vulnerabilityreports,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=aquasecurity.github.io.giantswarm,resources=vulnerabilityreports/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=aquasecurity.github.io.giantswarm,resources=vulnerabilityreports/finalizers,verbs=update

func (r *VulnerabilityReportReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	_ = log.FromContext(ctx)
	_ = r.Log.WithValues("vulnerabilityreport", req.NamespacedName)

	report := &aqua.VulnerabilityReport{}
	if err := r.Client.Get(ctx, req.NamespacedName, report); err != nil {
		if apierrors.IsNotFound(err) {
			// Most likely the report was deleted.
			return ctrl.Result{}, nil
		}

		// Error reading the object - requeue the request.
		r.Log.Error(err, "Unable to read report")
		// TODO requeue
		return ctrl.Result{}, err
	}

	r.Log.Info(fmt.Sprintf("Reconciled %s || Found (C/H/M/L/N/U): %d/%d/%d/%d/%d/%d",
		req.NamespacedName,
		report.Report.Summary.CriticalCount,
		report.Report.Summary.HighCount,
		report.Report.Summary.MediumCount,
		report.Report.Summary.LowCount,
		report.Report.Summary.NoneCount,
		report.Report.Summary.UnknownCount,
	))

	// Publish summary and CVE metrics for this report.
	publishImageMetrics(report)

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *VulnerabilityReportReconciler) SetupWithManager(mgr ctrl.Manager) error {
	err := ctrl.NewControllerManagedBy(mgr).
		For(&aqua.VulnerabilityReport{}).
		Complete(r)
	if err != nil {
		return errors.Wrap(err, "failed setting up controller with controller manager")
	}

	return nil
}

func publishImageMetrics(report *aqua.VulnerabilityReport) {
	VulnerabilitySummary.WithLabelValues(
		report.Namespace,
		report.Report.Artifact.Repository,
		report.Report.Artifact.Tag,
		report.Report.Artifact.Digest,
		string(aqua.SeverityCritical),
	).Set(float64(report.Report.Summary.CriticalCount))

	VulnerabilitySummary.WithLabelValues(
		report.Namespace,
		report.Report.Artifact.Repository,
		report.Report.Artifact.Tag,
		report.Report.Artifact.Digest,
		string(aqua.SeverityHigh),
	).Set(float64(report.Report.Summary.HighCount))

	VulnerabilitySummary.WithLabelValues(
		report.Namespace,
		report.Report.Artifact.Repository,
		report.Report.Artifact.Tag,
		report.Report.Artifact.Digest,
		string(aqua.SeverityMedium),
	).Set(float64(report.Report.Summary.MediumCount))

	VulnerabilitySummary.WithLabelValues(
		report.Namespace,
		report.Report.Artifact.Repository,
		report.Report.Artifact.Tag,
		report.Report.Artifact.Digest,
		string(aqua.SeverityLow),
	).Set(float64(report.Report.Summary.LowCount))

	VulnerabilitySummary.WithLabelValues(
		report.Namespace,
		report.Report.Artifact.Repository,
		report.Report.Artifact.Tag,
		report.Report.Artifact.Digest,
		string(aqua.SeverityNone),
	).Set(float64(report.Report.Summary.NoneCount))

	VulnerabilitySummary.WithLabelValues(
		report.Namespace,
		report.Report.Artifact.Repository,
		report.Report.Artifact.Tag,
		report.Report.Artifact.Digest,
		string(aqua.SeverityUnknown),
	).Set(float64(report.Report.Summary.UnknownCount))

	for _, v := range report.Report.Vulnerabilities {

		score := ""
		if v.Score != nil {
			score = fmt.Sprintf("%f", *v.Score)
		}

		VulnerabilityInfo.WithLabelValues(
			report.Namespace,
			report.Report.Artifact.Repository,
			report.Report.Artifact.Tag,
			report.Report.Artifact.Digest,
			v.VulnerabilityID,
			score,
			string(v.Severity),
		).Set(1)
	}
}
